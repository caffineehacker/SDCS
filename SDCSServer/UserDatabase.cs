//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Server {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class UserDatabase : DataSet {
        
        private Buddy_ListDataTable tableBuddy_List;
        
        private UsersDataTable tableUsers;
        
        private DataRelation relationUsersBuddy_x0020_List;
        
        public UserDatabase() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected UserDatabase(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Buddy List"] != null)) {
                    this.Tables.Add(new Buddy_ListDataTable(ds.Tables["Buddy List"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    this.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Buddy_ListDataTable Buddy_List {
            get {
                return this.tableBuddy_List;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        public override DataSet Clone() {
            UserDatabase cln = ((UserDatabase)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Buddy List"] != null)) {
                this.Tables.Add(new Buddy_ListDataTable(ds.Tables["Buddy List"]));
            }
            if ((ds.Tables["Users"] != null)) {
                this.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBuddy_List = ((Buddy_ListDataTable)(this.Tables["Buddy List"]));
            if ((this.tableBuddy_List != null)) {
                this.tableBuddy_List.InitVars();
            }
            this.tableUsers = ((UsersDataTable)(this.Tables["Users"]));
            if ((this.tableUsers != null)) {
                this.tableUsers.InitVars();
            }
            this.relationUsersBuddy_x0020_List = this.Relations["UsersBuddy_x0020_List"];
        }
        
        private void InitClass() {
            this.DataSetName = "UserDatabase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UserDatabase.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBuddy_List = new Buddy_ListDataTable();
            this.Tables.Add(this.tableBuddy_List);
            this.tableUsers = new UsersDataTable();
            this.Tables.Add(this.tableUsers);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("UsersBuddy_x0020_List", new DataColumn[] {
                        this.tableUsers.UserIDColumn}, new DataColumn[] {
                        this.tableBuddy_List.UserIDColumn});
            this.tableBuddy_List.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationUsersBuddy_x0020_List = new DataRelation("UsersBuddy_x0020_List", new DataColumn[] {
                        this.tableUsers.UserIDColumn}, new DataColumn[] {
                        this.tableBuddy_List.UserIDColumn}, false);
            this.Relations.Add(this.relationUsersBuddy_x0020_List);
        }
        
        private bool ShouldSerializeBuddy_List() {
            return false;
        }
        
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Buddy_ListRowChangeEventHandler(object sender, Buddy_ListRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Buddy_ListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUserID;
            
            private DataColumn columnFriend;
            
            private DataColumn columnGroup;
            
            internal Buddy_ListDataTable() : 
                    base("Buddy List") {
                this.InitClass();
            }
            
            internal Buddy_ListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn FriendColumn {
                get {
                    return this.columnFriend;
                }
            }
            
            internal DataColumn GroupColumn {
                get {
                    return this.columnGroup;
                }
            }
            
            public Buddy_ListRow this[int index] {
                get {
                    return ((Buddy_ListRow)(this.Rows[index]));
                }
            }
            
            public event Buddy_ListRowChangeEventHandler Buddy_ListRowChanged;
            
            public event Buddy_ListRowChangeEventHandler Buddy_ListRowChanging;
            
            public event Buddy_ListRowChangeEventHandler Buddy_ListRowDeleted;
            
            public event Buddy_ListRowChangeEventHandler Buddy_ListRowDeleting;
            
            public void AddBuddy_ListRow(Buddy_ListRow row) {
                this.Rows.Add(row);
            }
            
            public Buddy_ListRow AddBuddy_ListRow(UsersRow parentUsersRowByUsersBuddy_x0020_List, int Friend, int Group) {
                Buddy_ListRow rowBuddy_ListRow = ((Buddy_ListRow)(this.NewRow()));
                rowBuddy_ListRow.ItemArray = new object[] {
                        parentUsersRowByUsersBuddy_x0020_List[0],
                        Friend,
                        Group};
                this.Rows.Add(rowBuddy_ListRow);
                return rowBuddy_ListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Buddy_ListDataTable cln = ((Buddy_ListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Buddy_ListDataTable();
            }
            
            internal void InitVars() {
                this.columnUserID = this.Columns["UserID"];
                this.columnFriend = this.Columns["Friend"];
                this.columnGroup = this.Columns["Group"];
            }
            
            private void InitClass() {
                this.columnUserID = new DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnFriend = new DataColumn("Friend", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFriend);
                this.columnGroup = new DataColumn("Group", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroup);
            }
            
            public Buddy_ListRow NewBuddy_ListRow() {
                return ((Buddy_ListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Buddy_ListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Buddy_ListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Buddy_ListRowChanged != null)) {
                    this.Buddy_ListRowChanged(this, new Buddy_ListRowChangeEvent(((Buddy_ListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Buddy_ListRowChanging != null)) {
                    this.Buddy_ListRowChanging(this, new Buddy_ListRowChangeEvent(((Buddy_ListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Buddy_ListRowDeleted != null)) {
                    this.Buddy_ListRowDeleted(this, new Buddy_ListRowChangeEvent(((Buddy_ListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Buddy_ListRowDeleting != null)) {
                    this.Buddy_ListRowDeleting(this, new Buddy_ListRowChangeEvent(((Buddy_ListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBuddy_ListRow(Buddy_ListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Buddy_ListRow : DataRow {
            
            private Buddy_ListDataTable tableBuddy_List;
            
            internal Buddy_ListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuddy_List = ((Buddy_ListDataTable)(this.Table));
            }
            
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableBuddy_List.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuddy_List.UserIDColumn] = value;
                }
            }
            
            public int Friend {
                get {
                    try {
                        return ((int)(this[this.tableBuddy_List.FriendColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuddy_List.FriendColumn] = value;
                }
            }
            
            public int Group {
                get {
                    try {
                        return ((int)(this[this.tableBuddy_List.GroupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuddy_List.GroupColumn] = value;
                }
            }
            
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["UsersBuddy_x0020_List"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["UsersBuddy_x0020_List"]);
                }
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableBuddy_List.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableBuddy_List.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFriendNull() {
                return this.IsNull(this.tableBuddy_List.FriendColumn);
            }
            
            public void SetFriendNull() {
                this[this.tableBuddy_List.FriendColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupNull() {
                return this.IsNull(this.tableBuddy_List.GroupColumn);
            }
            
            public void SetGroupNull() {
                this[this.tableBuddy_List.GroupColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Buddy_ListRowChangeEvent : EventArgs {
            
            private Buddy_ListRow eventRow;
            
            private DataRowAction eventAction;
            
            public Buddy_ListRowChangeEvent(Buddy_ListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Buddy_ListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUserID;
            
            private DataColumn columnUsername;
            
            private DataColumn columnFirst_Name;
            
            private DataColumn columnLast_Name;
            
            private DataColumn columnAddress1;
            
            private DataColumn columnAddress2;
            
            private DataColumn columnCity;
            
            private DataColumn columnState;
            
            private DataColumn columnZip_Code;
            
            private DataColumn columnWeb_Site;
            
            private DataColumn columnPhone;
            
            private DataColumn columnMobile_Phone;
            
            private DataColumn columnPassword;
            
            internal UsersDataTable() : 
                    base("Users") {
                this.InitClass();
            }
            
            internal UsersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            internal DataColumn First_NameColumn {
                get {
                    return this.columnFirst_Name;
                }
            }
            
            internal DataColumn Last_NameColumn {
                get {
                    return this.columnLast_Name;
                }
            }
            
            internal DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            internal DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn Zip_CodeColumn {
                get {
                    return this.columnZip_Code;
                }
            }
            
            internal DataColumn Web_SiteColumn {
                get {
                    return this.columnWeb_Site;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn Mobile_PhoneColumn {
                get {
                    return this.columnMobile_Phone;
                }
            }
            
            internal DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            public UsersRow AddUsersRow(int UserID, string Username, string First_Name, string Last_Name, string Address1, string Address2, string City, string State, string Zip_Code, string Web_Site, string Phone, string Mobile_Phone, string Password) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        UserID,
                        Username,
                        First_Name,
                        Last_Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        Zip_Code,
                        Web_Site,
                        Phone,
                        Mobile_Phone,
                        Password};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            public UsersRow FindByUserID(int UserID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            internal void InitVars() {
                this.columnUserID = this.Columns["UserID"];
                this.columnUsername = this.Columns["Username"];
                this.columnFirst_Name = this.Columns["First Name"];
                this.columnLast_Name = this.Columns["Last Name"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnCity = this.Columns["City"];
                this.columnState = this.Columns["State"];
                this.columnZip_Code = this.Columns["Zip Code"];
                this.columnWeb_Site = this.Columns["Web Site"];
                this.columnPhone = this.Columns["Phone"];
                this.columnMobile_Phone = this.Columns["Mobile Phone"];
                this.columnPassword = this.Columns["Password"];
            }
            
            private void InitClass() {
                this.columnUserID = new DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnUsername = new DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUsername);
                this.columnFirst_Name = new DataColumn("First Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirst_Name);
                this.columnLast_Name = new DataColumn("Last Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLast_Name);
                this.columnAddress1 = new DataColumn("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new DataColumn("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnZip_Code = new DataColumn("Zip Code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZip_Code);
                this.columnWeb_Site = new DataColumn("Web Site", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeb_Site);
                this.columnPhone = new DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnMobile_Phone = new DataColumn("Mobile Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMobile_Phone);
                this.columnPassword = new DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPassword);
                this.Constraints.Add(new UniqueConstraint("UserIDKey", new DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.Unique = true;
            }
            
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersRow : DataRow {
            
            private UsersDataTable tableUsers;
            
            internal UsersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            public int UserID {
                get {
                    return ((int)(this[this.tableUsers.UserIDColumn]));
                }
                set {
                    this[this.tableUsers.UserIDColumn] = value;
                }
            }
            
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableUsers.UsernameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.UsernameColumn] = value;
                }
            }
            
            public string First_Name {
                get {
                    try {
                        return ((string)(this[this.tableUsers.First_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.First_NameColumn] = value;
                }
            }
            
            public string Last_Name {
                get {
                    try {
                        return ((string)(this[this.tableUsers.Last_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.Last_NameColumn] = value;
                }
            }
            
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableUsers.Address1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.Address1Column] = value;
                }
            }
            
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableUsers.Address2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.Address2Column] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableUsers.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.CityColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableUsers.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.StateColumn] = value;
                }
            }
            
            public string Zip_Code {
                get {
                    try {
                        return ((string)(this[this.tableUsers.Zip_CodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.Zip_CodeColumn] = value;
                }
            }
            
            public string Web_Site {
                get {
                    try {
                        return ((string)(this[this.tableUsers.Web_SiteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.Web_SiteColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableUsers.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.PhoneColumn] = value;
                }
            }
            
            public string Mobile_Phone {
                get {
                    try {
                        return ((string)(this[this.tableUsers.Mobile_PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.Mobile_PhoneColumn] = value;
                }
            }
            
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableUsers.PasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.PasswordColumn] = value;
                }
            }
            
            public bool IsUsernameNull() {
                return this.IsNull(this.tableUsers.UsernameColumn);
            }
            
            public void SetUsernameNull() {
                this[this.tableUsers.UsernameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirst_NameNull() {
                return this.IsNull(this.tableUsers.First_NameColumn);
            }
            
            public void SetFirst_NameNull() {
                this[this.tableUsers.First_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLast_NameNull() {
                return this.IsNull(this.tableUsers.Last_NameColumn);
            }
            
            public void SetLast_NameNull() {
                this[this.tableUsers.Last_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null() {
                return this.IsNull(this.tableUsers.Address1Column);
            }
            
            public void SetAddress1Null() {
                this[this.tableUsers.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null() {
                return this.IsNull(this.tableUsers.Address2Column);
            }
            
            public void SetAddress2Null() {
                this[this.tableUsers.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableUsers.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableUsers.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableUsers.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableUsers.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsZip_CodeNull() {
                return this.IsNull(this.tableUsers.Zip_CodeColumn);
            }
            
            public void SetZip_CodeNull() {
                this[this.tableUsers.Zip_CodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeb_SiteNull() {
                return this.IsNull(this.tableUsers.Web_SiteColumn);
            }
            
            public void SetWeb_SiteNull() {
                this[this.tableUsers.Web_SiteColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableUsers.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableUsers.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsMobile_PhoneNull() {
                return this.IsNull(this.tableUsers.Mobile_PhoneColumn);
            }
            
            public void SetMobile_PhoneNull() {
                this[this.tableUsers.Mobile_PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsPasswordNull() {
                return this.IsNull(this.tableUsers.PasswordColumn);
            }
            
            public void SetPasswordNull() {
                this[this.tableUsers.PasswordColumn] = System.Convert.DBNull;
            }
            
            public Buddy_ListRow[] GetBuddy_ListRows() {
                return ((Buddy_ListRow[])(this.GetChildRows(this.Table.ChildRelations["UsersBuddy_x0020_List"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersRowChangeEvent : EventArgs {
            
            private UsersRow eventRow;
            
            private DataRowAction eventAction;
            
            public UsersRowChangeEvent(UsersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
